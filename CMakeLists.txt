CMAKE_MINIMUM_REQUIRED(VERSION 3.5)

SET(CMAKE_CXX_STANDARD 14)
SET(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)
SET(GCC_COVERAGE_COMPILE_FLAGS "-march=native")

ADD_DEFINITIONS(${GCC_COVERAGE_COMPILE_FLAGS})

set(CMAKE_CXX_FLAGS_RELEASE "-Ofast -fforward-propagate -finline-functions -findirect-inlining -fmodulo-sched -fmodulo-sched-allow-regmoves -fno-branch-count-reg -flto -fomit-frame-pointer")


INCLUDE(${CMAKE_SOURCE_DIR}/cmake/util/CMakeArgs.cmake)

# Declarations
INCLUDE(${CMAKE_SOURCE_DIR}/cmake/DeclareGlobals.cmake)
INCLUDE(${CMAKE_SOURCE_DIR}/cmake/DeclareIncludes.cmake)

# Superbuild scripts
OPTION(USE_SUPERBUILD "Build superbuilds first" ON)

IF(USE_SUPERBUILD)
    PROJECT(ANUBiS_Superbuild NONE)
    INCLUDE(cmake/external/External.cmake)
    RETURN()
ELSE()
    PROJECT(ANUBiS
            LANGUAGES CXX
            VERSION 0.1)
    MESSAGE(STATUS "Building ANUBiS with CMake Args ${CMAKE_ARGS}")
ENDIF()

INCLUDE(GNUInstallDirs)

set (CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fno-omit-frame-pointer -fsanitize=address")
set (CMAKE_LINKER_FLAGS_DEBUG "${CMAKE_LINKER_FLAGS_DEBUG} -fno-omit-frame-pointer -fsanitize=address")

SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin/${CMAKE_BUILD_TYPE}-x${ARCHITECTURE}")
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/shlib/${CMAKE_BUILD_TYPE}-x${ARCHITECTURE}")
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/lib/${CMAKE_BUILD_TYPE}-x${ARCHITECTURE}")

SET(BUILD_DOCS OFF)
OPTION(BUILD_TESTING "Create tests using CMake" OFF)

#SET(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)

IF(MSVC)
    SET(CMAKE_DEBUG_POSTFIX "d")
ENDIF()

SET(CMAKE_POSITION_INDEPENDENT_CODE ON)

SET(CMAKE_C_EXTENSIONS OFF)
SET(CMAKE_CXX_EXTENSIONS OFF)

if(BUILD_TESTING)
    ENABLE_TESTING()
endif()

INCLUDE(${CMAKE_SOURCE_DIR}/cmake/AddInstallRPATHSupport.cmake)
ADD_INSTALL_RPATH_SUPPORT(BIN_DIRS "${CMAKE_INSTALL_FULL_BINDIR}"
        LIB_DIRS "${CMAKE_INSTALL_FULL_LIBDIR}"
        INSTALL_NAME_DIR "${CMAKE_INSTALL_FULL_LIBDIR}"
        USE_LINK_PATH)

IF(NOT CMAKE_CONFIGURATION_TYPES)
    IF(NOT CMAKE_BUILD_TYPE)
        MESSAGE(STATUS "Setting build type to 'Release' as none was specified.")
        SET_PROPERTY(CACHE CMAKE_BUILD_TYPE PROPERTY VALUE "Release")
    ENDIF()
ENDIF()

ADD_SUBDIRECTORY(src)

INCLUDE(${CMAKE_SOURCE_DIR}/cmake/InstallBasicPackageFiles.cmake)
INSTALL_BASIC_PACKAGE_FILES(${PROJECT_NAME}
                            VERSION ${${PROJECT_NAME}_VERSION}
                            COMPATIBILITY AnyNewerVersion
                            VARS_PREFIX ${PROJECT_NAME}
                            NO_CHECK_REQUIRED_COMPONENTS_MACRO)
INCLUDE(${CMAKE_SOURCE_DIR}/cmake/AddUninstallTarget.cmake)

IF(BUILD_TESTING)
    ADD_SUBDIRECTORY(test)
ENDIF()

if(BUILD_DOCS)
    ADD_SUBDIRECTORY(doc)
endif()